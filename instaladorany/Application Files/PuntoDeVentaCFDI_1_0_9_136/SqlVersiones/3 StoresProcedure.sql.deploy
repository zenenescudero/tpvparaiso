CREATE OR ALTER PROCEDURE InsertArticulosFiltro
    @fechaInicio DATETIME,
    @fechaFin DATETIME,
    @sucursalId INT,
    @sinVentas INT
AS
BEGIN
    -- Eliminar los datos existentes en la tabla ArticulosFiltro
    DELETE FROM ArticulosFiltro;

    IF @sinVentas = 1
    BEGIN
        -- Insertar los ArticuloId que no tienen ventas en el periodo buscado
        INSERT INTO ArticulosFiltro (ArticuloId)
        SELECT a.Id
        FROM Articulos a
        WHERE NOT EXISTS (
            SELECT 1
            FROM Tickets t
            INNER JOIN TicketsDetalle td ON t.Id = td.IdTicket
            WHERE t.Cancelado = 0
              AND t.SucursalId = @sucursalId
              AND t.CUANDO > @fechaInicio
              AND t.CUANDO < @fechaFin
              AND td.ArticuloId = a.Id
        );
    END
    ELSE
    BEGIN
        -- Insertar los ArticuloId que tienen ventas en el periodo buscado
        INSERT INTO ArticulosFiltro (ArticuloId)
        SELECT DISTINCT td.ArticuloId
        FROM Tickets t
        INNER JOIN TicketsDetalle td ON t.Id = td.IdTicket
        WHERE t.Cancelado = 0
          AND t.SucursalId = @sucursalId
          AND t.CUANDO > @fechaInicio
          AND t.CUANDO < @fechaFin;
    END;
END;

GO

CREATE OR ALTER PROCEDURE InsertUltimasVentas
    @fechaFin DATETIME,
    @sucursalId INT
AS
BEGIN
    DELETE FROM UltimasVentas;

    WITH RankedSales AS (
        SELECT 
            td.ArticuloId,
            cast(t.Fecha as date) AS FechaVenta,
            sum(td.Cantidad) as Cantidad,
            ROW_NUMBER() OVER (PARTITION BY td.ArticuloId ORDER BY cast(t.Fecha as date) DESC) AS VentaRank
        FROM 
            Tickets t
        INNER JOIN 
            TicketsDetalle td ON t.Id = td.IdTicket
        INNER JOIN ArticulosFiltro ar ON td.ArticuloId = ar.ArticuloId
        WHERE 
            t.Cancelado = 0 
            AND t.CUANDO < @fechaFin 
            AND t.SucursalId = @sucursalId
        GROUP BY 
            td.ArticuloId,cast(t.Fecha as date)
    )
    INSERT INTO UltimasVentas (ArticuloId, Ultima_Venta_Fecha, Ultima_Venta_Cantidad, Penultima_Venta_Fecha, Penultima_Venta_Cantidad)
    SELECT 
        Ultima.ArticuloId,
        Ultima.FechaVenta AS Ultima_Venta_Fecha,
        Ultima.Cantidad AS Ultima_Venta_Cantidad,
        Penultima.FechaVenta AS Penultima_Venta_Fecha,
        Penultima.Cantidad AS Penultima_Venta_Cantidad
    FROM 
        RankedSales Ultima
    LEFT JOIN 
        RankedSales Penultima 
        ON Ultima.ArticuloId = Penultima.ArticuloId 
        AND Penultima.VentaRank = Ultima.VentaRank + 1
    WHERE 
        Ultima.VentaRank = 1;
END;

GO

CREATE OR ALTER PROCEDURE InsertUltimaCompraArticulo
    @fechaFin DATETIME,
    @sucursalId INT
AS
BEGIN
    DELETE FROM UltimaCompraArticulo;

    WITH UltimaCompra AS (
        SELECT 
            ocd.ArticuloId,
            p.Proveedor AS Proveedor_Clave,
            p.Nombre AS Proveedor,
            ocd.Cantidad AS Ultima_Compra_Cantidad,
            ocd.CUANDO AS Ultima_Compra_Fecha,
            ROW_NUMBER() OVER (PARTITION BY ocd.ArticuloId ORDER BY ocd.CUANDO DESC) AS VentaRank
        FROM 
            OrdenCompra oc
        INNER JOIN 
            OrdenCompraDetalle ocd ON oc.Id = ocd.IdOrdenCompra
        INNER JOIN 
            ArticulosFiltro ar ON ocd.ArticuloId = ar.ArticuloId
        INNER JOIN 
            Proveedores p ON oc.ProveedorId = p.Id
        WHERE 
            oc.SucursalId = @sucursalId 
            AND ocd.CUANDO < @fechaFin
    )
    INSERT INTO UltimaCompraArticulo (ArticuloId, Proveedor_Clave, Proveedor, Ultima_Compra_Cantidad, Ultima_Compra_Fecha)
    SELECT 
        ArticuloId,
        Proveedor_Clave,
        Proveedor,
        Ultima_Compra_Cantidad,
        Ultima_Compra_Fecha
    FROM 
        UltimaCompra
    WHERE 
        VentaRank = 1;
END;

GO

CREATE OR ALTER PROCEDURE InsertResumenVentas
    @fechaInicio DATETIME,
    @fechaFin DATETIME,
    @sucursalId INT
AS
BEGIN
    DELETE FROM ResumenVentas;

    INSERT INTO ResumenVentas (ArticuloId, Total_Vendidos,Total_Compra, Utilidad_Total, Importe_Total, IEPS_Total, IVA_Total, Venta_Total)
    SELECT 
        td.ArticuloId,            
        SUM(td.cantidad) AS Total_Vendidos,  
        SUM(td.PrecioCompra * td.Cantidad) as Total_Compra,
        SUM(td.UtilidadTotal) AS Utilidad_Total,
        SUM(td.Importe) AS Importe_Total,
        SUM(td.IepsVal) AS IEPS_Total,
        SUM(td.IvaVal) AS IVA_Total,
        SUM(td.Total) AS Venta_Total
    FROM 
        TicketsDetalle td
    LEFT JOIN 
        Tickets t ON t.Id = td.IdTicket
    WHERE 
        t.Cancelado = 0 
        AND t.CUANDO > @fechaInicio 
        AND t.CUANDO < @fechaFin 
        AND t.SucursalId = @sucursalId                     
    GROUP BY 
        td.ArticuloId;
END;

GO

CREATE OR ALTER PROCEDURE InsertResultadosVentas  
    @sucursalId INT  
AS  
BEGIN  
    -- Eliminar los datos existentes en la tabla ResultadosVentas  
    DELETE FROM ResultadosVentas;  
  
    -- Insertar los nuevos resultados en la tabla ResultadosVentas  
    INSERT INTO ResultadosVentas (  
        Proveedor_Clave,  
        Proveedor,  
        ARTICULO,  
        Descripcion,  
        Marca,  
        Seccion,  
        Unidad,  
        Margen_Base,  
        Stock_Actual,  
        Total_Vendidos,  
  Total_Compra,  
        Utilidad_Total,  
        Utilidad_Total_Margen,  
        Importe_Total,  
        IEPS_Total,  
        IVA_Total,  
        Venta_Total,  
        Ultima_Compra_Fecha,  
        Ultima_Compra_Cantidad,  
        Ultima_Venta_Fecha,  
        Penultima_Venta_Fecha,  
        Ultima_Venta_Cantidad,  
        Diferencia_Dias_Ventas,  
        SalidasPeriodo,  
        SugerenciaCompra  
    )  
    SELECT   
        uc.Proveedor_Clave,  
        uc.Proveedor,  
        a.ARTICULO,  
        a.Descripcion,  
        marcas.Marca,  
        seccion.Seccion,  
        a.Unidad,  
        a.Margen,  
        inv.Saldo AS Stock_Actual,  
        rs.Total_Vendidos,  
        (rs.Importe_Total-rs.Utilidad_Total) as Total_Compra,  
        rs.Utilidad_Total,  
        (case when rs.Importe_Total > 0 then  
            ((rs.Utilidad_Total /(rs.Importe_Total-rs.Utilidad_Total) ) * 100.00 )  
            else 0 end ) as Utilidad_Total_Margen,  
        rs.Importe_Total,  
        rs.IEPS_Total,  
        rs.IVA_Total,  
        rs.Venta_Total,  
        uc.Ultima_Compra_Fecha,  
        uc.Ultima_Compra_Cantidad,  
        uv.Ultima_Venta_Fecha,  
        uv.Penultima_Venta_Fecha,  
        uv.Ultima_Venta_Cantidad,  
        ISNULL(DATEDIFF(day, uv.Penultima_Venta_Fecha, uv.Ultima_Venta_Fecha), 365) AS Diferencia_Dias_Ventas,  
        ucp.SalidasPeriodo,  
        ucp.SugerenciaCompra  
    FROM ArticulosFiltro ar  
    INNER JOIN Inventario inv ON inv.ArticuloId = ar.ArticuloId  
    INNER JOIN Articulos a ON a.Id = ar.ArticuloId  
    INNER JOIN CAT_MARCAS marcas ON marcas.Id = a.MarcaId  
    INNER JOIN CAT_SECCIONES seccion ON seccion.Id = a.SeccionId  
     LEFT JOIN   
        (SELECT DISTINCT ArticuloId, SalidasPeriodo, SugerenciaCompra   
         FROM UltimasVentasPeriodo) ucp ON ucp.ArticuloId = ar.ArticuloId  
    LEFT JOIN   
        (SELECT DISTINCT ArticuloId, Ultima_Venta_Fecha, Penultima_Venta_Fecha, Ultima_Venta_Cantidad   
         FROM UltimasVentas) uv ON uv.ArticuloId = ar.ArticuloId  
    LEFT JOIN   
        (SELECT DISTINCT ArticuloId, Proveedor_Clave, Proveedor, Ultima_Compra_Fecha, Ultima_Compra_Cantidad   
         FROM UltimaCompraArticulo) uc ON uc.ArticuloId = ar.ArticuloId  
    LEFT JOIN   
        (SELECT DISTINCT ArticuloId, Total_Vendidos,Total_Compra, Utilidad_Total, Importe_Total, IEPS_Total, IVA_Total, Venta_Total   
         FROM ResumenVentas) rs ON rs.ArticuloId = ar.ArticuloId  
    WHERE inv.SucursalId = @sucursalId  
    ORDER BY   
        ar.ArticuloId;  
END; 

GO

CREATE OR ALTER PROCEDURE GetResultadosVentas
    @OrderByColumn NVARCHAR(255), -- Nombre de la columna para ordenar
    @OrderDirection NVARCHAR(4)  -- Dirección del orden: 'ASC' o 'DESC'
AS
BEGIN
    -- Validar que el parámetro @OrderDirection sea válido
    IF UPPER(@OrderDirection) NOT IN ('ASC', 'DESC')
    BEGIN
        RAISERROR('El parámetro @OrderDirection debe ser "ASC" o "DESC".', 16, 1);
        RETURN;
    END;

    -- Construir la consulta dinámica
    DECLARE @SQL NVARCHAR(MAX);

    SET @SQL = '
    SELECT
        [Proveedor_Clave],
        [Proveedor],
        [ARTICULO],
        [Descripcion],
        [Marca],
        [Seccion],
        [Unidad],
        [Margen_Base],
        [Stock_Actual],
        [Total_Vendidos],
        [Total_Compra],
        [Utilidad_Total],
        [Utilidad_Total_Margen],
        [Importe_Total],
        [IEPS_Total],
        [IVA_Total],
        [Venta_Total],
        [Ultima_Compra_Fecha],
        [Ultima_Compra_Cantidad],
        [Ultima_Venta_Fecha],
        [Penultima_Venta_Fecha],
        [Ultima_Venta_Cantidad],
        [Diferencia_Dias_Ventas],
        [SalidasPeriodo],
        [SugerenciaCompra]
    FROM [ResultadosVentas]
    ORDER BY ' + QUOTENAME(@OrderByColumn) + ' ' + @OrderDirection;

    -- Ejecutar la consulta dinámica
    EXEC sp_executesql @SQL;
END;

go

CREATE OR ALTER PROCEDURE InsertUltimasVentasCatalogo
   @sucursalId INT
AS
BEGIN
    DELETE FROM UltimasVentasCatalogo;

    WITH RankedSales AS (
        SELECT 
            td.ArticuloId,
            cast(t.Fecha as date) AS FechaVenta,
            sum(td.Cantidad) as Cantidad,
            ROW_NUMBER() OVER (PARTITION BY td.ArticuloId ORDER BY cast(t.Fecha as date) DESC) AS VentaRank
        FROM 
            Tickets t
        INNER JOIN 
            TicketsDetalle td ON t.Id = td.IdTicket
        WHERE 
            t.Cancelado = 0 
            AND t.CUANDO < CURRENT_TIMESTAMP 
            AND t.SucursalId = @sucursalId
        GROUP BY 
            td.ArticuloId,cast(t.Fecha as date)
    )
    INSERT INTO UltimasVentasCatalogo(ArticuloId, Ultima_Venta_Fecha, Ultima_Venta_Cantidad, Penultima_Venta_Fecha, Penultima_Venta_Cantidad)
    SELECT 
        Ultima.ArticuloId,
        Ultima.FechaVenta AS Ultima_Venta_Fecha,
        Ultima.Cantidad AS Ultima_Venta_Cantidad,
        Penultima.FechaVenta AS Penultima_Venta_Fecha,
        Penultima.Cantidad AS Penultima_Venta_Cantidad
    FROM 
        RankedSales Ultima
    LEFT JOIN 
        RankedSales Penultima 
        ON Ultima.ArticuloId = Penultima.ArticuloId 
        AND Penultima.VentaRank = Ultima.VentaRank + 1
    WHERE 
        Ultima.VentaRank = 1;
END;

go

CREATE OR ALTER PROCEDURE InsertUltimasVentasPeriodo
   @sucursalId INT,@dias INT
AS
BEGIN
    DELETE FROM UltimasVentasPeriodo;

   
    INSERT INTO UltimasVentasPeriodo(ArticuloId, SalidasPeriodo, SugerenciaCompra)
    select tabla.ArticuloId ,tabla.SalidasPeriodo, 
    (case when tabla.SalidasPeriodo > tabla.Saldo 
          then tabla.SalidasPeriodo - tabla.Saldo else 0 end) as SugerenciaCompra from (
    SELECT 
        inm.ArticuloId,
        SUM(inm.Salida) AS SalidasPeriodo,
        inv.Saldo
    FROM InventarioMovimientos inm
    inner join Inventario inv on(inv.ArticuloId = inm.ArticuloId and inv.SucursalId = inm.SucursalId)
    WHERE inm.ConceptoInvId = 100 and inm.SucursalId = @sucursalId
      AND inm.CUANDO > DATEADD(DAY, -@dias, GETDATE())
GROUP BY inm.ArticuloId, inv.Saldo) as tabla order by tabla.ArticuloId
    
END;
